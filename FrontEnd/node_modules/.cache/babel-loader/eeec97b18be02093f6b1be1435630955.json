{"remainingRequest":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/babel-loader/lib/index.js!/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/kanto/Desktop/MiniProj2/FrontEnd/src/api/expert.service.js","dependencies":[{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/src/api/expert.service.js","mtime":1701888738937},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1701363611251},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1701363612909},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/eslint-loader/index.js","mtime":1701363611390}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9rYW50by9EZXNrdG9wL01pbmlQcm9qMi9Gcm9udEVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IEFQSV9VUkwgZnJvbSAiLi9jb25maWcuanMiOwpleHBvcnQgdmFyIGV4cGVydFNlcnZpY2UgPSB7CiAgZ2V0RXhwZXJ0czogZnVuY3Rpb24gKCkgewogICAgdmFyIF9nZXRFeHBlcnRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHRva2VuKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiIi5jb25jYXQoQVBJX1VSTCwgIi9leHBlcnRzIiksIHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IHRva2VuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dC5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICB0aHJvdyBFcnJvcihoYW5kbGVSZXNwb25zZXMocmVzcG9uc2Uuc3RhdHVzKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBnZXRFeHBlcnRzKF94KSB7CiAgICAgIHJldHVybiBfZ2V0RXhwZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBnZXRFeHBlcnRzOwogIH0oKSwKICBhZGRFeHBlcnQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfYWRkRXhwZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMih0b2tlbiwgcGF5bG9hZCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiIi5jb25jYXQoQVBJX1VSTCwgIi9leHBlcnRzIiksIHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiB0b2tlbgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQyLnNlbnQpOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHRocm93IEVycm9yKGhhbmRsZVJlc3BvbnNlcyhyZXNwb25zZS5zdGF0dXMpKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gYWRkRXhwZXJ0KF94MiwgX3gzKSB7CiAgICAgIHJldHVybiBfYWRkRXhwZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGFkZEV4cGVydDsKICB9KCksCiAgZWRpdEV4cGVydDogZnVuY3Rpb24gKCkgewogICAgdmFyIF9lZGl0RXhwZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyh0b2tlbiwgcGF5bG9hZCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiIi5jb25jYXQoQVBJX1VSTCwgIi9leHBlcnRzLyIpLmNvbmNhdChwYXlsb2FkLl9pZCksIHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBVVCIsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IHRva2VuCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDMuc2VudCk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoaGFuZGxlUmVzcG9uc2VzKHJlc3BvbnNlLnN0YXR1cykpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBlZGl0RXhwZXJ0KF94NCwgX3g1KSB7CiAgICAgIHJldHVybiBfZWRpdEV4cGVydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBlZGl0RXhwZXJ0OwogIH0oKSwKICByZW1vdmVFeHBlcnQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcmVtb3ZlRXhwZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCh0b2tlbiwgaWQpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goIiIuY29uY2F0KEFQSV9VUkwsICIvZXhwZXJ0cy8iKS5jb25jYXQoaWQpLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJERUxFVEUiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiB0b2tlbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NC5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICB0aHJvdyBFcnJvcihoYW5kbGVSZXNwb25zZXMocmVzcG9uc2Uuc3RhdHVzKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQpOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIHJlbW92ZUV4cGVydChfeDYsIF94NykgewogICAgICByZXR1cm4gX3JlbW92ZUV4cGVydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiByZW1vdmVFeHBlcnQ7CiAgfSgpCn07CgpmdW5jdGlvbiBoYW5kbGVSZXNwb25zZXMoY29kZSkgewogIHZhciBtZXNzYWdlID0gIiI7CgogIHN3aXRjaCAoY29kZSkgewogICAgY2FzZSA0MDE6CiAgICAgIG1lc3NhZ2UgPSAiTsOjbyBlc3TDoSBhdXRvcml6YWRvIGEgZXhlY3V0YXIgZXN0YSBhw6fDo28hIjsKICAgICAgYnJlYWs7CgogICAgZGVmYXVsdDoKICAgICAgbWVzc2FnZSA9ICJNZW5zYWdlbSBkZXNjb25oZWNpZGEiOwogICAgICBicmVhazsKICB9CgogIHJldHVybiBtZXNzYWdlOwp9CgpleHBvcnQgZGVmYXVsdCBleHBlcnRTZXJ2aWNlOw=="},{"version":3,"sources":["/Users/kanto/Desktop/MiniProj2/FrontEnd/src/api/expert.service.js"],"names":["API_URL","expertService","getExperts","token","fetch","method","headers","Authorization","response","ok","json","Error","handleResponses","status","addExpert","payload","body","JSON","stringify","editExpert","_id","removeExpert","id","code","message"],"mappings":"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","sourcesContent":["import API_URL from \"./config.js\";\n\nexport const expertService = {\n  async getExperts(token) {\n    let response = await fetch(`${API_URL}/experts`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n\n  async addExpert(token, payload) {\n    const response = await fetch(`${API_URL}/experts`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n\n  async editExpert(token, payload) {\n    const response = await fetch(`${API_URL}/experts/${payload._id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n\n  async removeExpert(token, id) {\n    const response = await fetch(`${API_URL}/experts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  }\n};\n\nfunction handleResponses(code) {\n  let message = \"\";\n  switch (code) {\n    case 401:\n      message = \"Não está autorizado a executar esta ação!\";\n      break;\n    default:\n      message = \"Mensagem desconhecida\";\n      break;\n  }\n  return message;\n}\n\nexport default expertService;\n"]}]}