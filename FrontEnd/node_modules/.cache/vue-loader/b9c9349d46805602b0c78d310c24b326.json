{"remainingRequest":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kanto/Desktop/MiniProj2/FrontEnd/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/src/views/Home.vue","mtime":1701976413261},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1701363611251},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1701363612856},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1701363611251},{"path":"/Users/kanto/Desktop/MiniProj2/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1701363612828}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJiLWNvbnRhaW5lciIsIHsgYXR0cnM6IHsgZmx1aWQ6ICIiIH0gfSwgWwogICAgX2MoCiAgICAgICJoZWFkZXIiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibWFzdGhlYWQgYmctc2Vjb25kYXJ5IHRleHQtd2hpdGUgdGV4dC1jZW50ZXIiIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJiLWNvbCIsIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYXN0aGVhZC1hdmF0YXIgbWItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2FuaW1hbGVjLnBuZyIpIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYXN0aGVhZC1zdWJoZWFkaW5nIGZvbnQtd2VpZ2h0LWxpZ2h0IiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBBcHJlbmRlciB0dWRvIHNvYnJlIGFuaW1haXMgZGUgdW1hIGZvcm1hIGRpdmVydGlkYSEgIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImItcm93IiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY29sIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIG1yLTIiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhcmlhbnQ6ICJsaWdodCIsIGhyZWY6ICIjcnVsZXMiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1pbmZvLWNpcmNsZSBtci0yIiB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNPTU8gSk9HQVI/ICIpCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIG1yLTIiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhcmlhbnQ6ICJkYW5nZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93UmFua2luZygpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNoYXJ0LWxpbmUgbXItMiIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJWRVIgUkFOS0lORyAiKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiBiZy1wcmltYXJ5IiwgYXR0cnM6IHsgaWQ6ICJydWxlcyIgfSB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jb250YWluZXIiLAogICAgICAgICAgeyBhdHRyczogeyBmbHVpZDogIiIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAicGFnZS1zZWN0aW9uLWhlYWRpbmcgdGV4dC1jZW50ZXIgdGV4dC11cHBlcmNhc2UgdGV4dC1zZWNvbmRhcnkgbWItNSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIiBSRUdSQVMgIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm10LTUgbWItNSIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0pLAogICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLWhpcHBvIGZhLTN4IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIndoaXRlIiB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAxIC0gU2VsZWNpb25hICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBTklNQUlTIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIGUgZXN0dWRhIHR1ZG8gc29icmUgb3MgYW5pbWFpcyBxdWUgdGVucyBkaXNwb27DrXZlaXMhICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgY29sczogIjIiIH0gfSksCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtY29tbWVudCBmYS0zeCIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJ3aGl0ZSIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiAyIC0gTW9zdHJhIHF1ZW0gc8OjbyBvcyB0ZXVzIGFuaW1haXMgcHJlZmVyaWRvcyBlIGZhbGEgY29tIG9zIHRldXMgYW1pZ29zIHNvYnJlIHF1YWxxdWVyIGFuaW1hbCEgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBjb2xzOiAiMiIgfSB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYi1yb3ciLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi01IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgY29sczogIjIiIH0gfSksCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdGFibGUgZmEtM3giLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAid2hpdGUiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIDMgLSBRdWFuZG8gdGUgc2VudGlyZXMgcHJlcGFyYWRvLCBzZWxlY2lvbmEgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlFVSVpaRVMgIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoImUgY29tZcOnYSBhIGpvZ2FyISAiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0pLAogICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLW1lZGFsIGZhLTN4IiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIndoaXRlIiB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIDQgLSDDgCBtZWRpZGEgcXVlIGZvcmVzIGF2YW7Dp2FuZG8sIGdhbmhhcyBwb250b3MsIGRlc2Jsb3F1ZWlhcyBub3ZvcyBhbmltYWlzIGUgc29iZXMgbm8gcmFua2luZyBkb3MgbWFpb3JlcyBlc3BlY2lhbGlzdGFzIGRlIGFuaW1haXMgZG8gcGxhbmV0YSEgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBjb2xzOiAiMiIgfSB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInBhZ2Utc2VjdGlvbiIsIGF0dHJzOiB7IGlkOiAiY29udGFjdHMiIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImgyIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInBhZ2Utc2VjdGlvbi1oZWFkaW5nIHRleHQtY2VudGVyIHRleHQtdXBwZXJjYXNlIHRleHQtc2Vjb25kYXJ5IG1iLTUiCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIENPTlRBQ1RPUyAiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImZvcm0iLAogICAgICAgICAgewogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZW5kKCRldmVudCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiLXJvdyIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImItY29sIiwgeyBhdHRyczogeyBjb2xzOiAiMiIgfSB9KSwKICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgY29sczogIjgiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGciLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICBpZDogInR4dE5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogImVzY3JldmUgbyB0ZXUgbm9tZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAiIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubmFtZSB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5uYW1lID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZW1haWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLWxnIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAidHh0TmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiZXNjcmV2ZSBvIHRldSBlLW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmVtYWlsIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVtYWlsID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3ViamVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic3ViamVjdCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAidHh0TmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiZXNjcmV2ZSBvIGFzc3VudG8iLAogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnN1YmplY3QgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc3ViamVjdCA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm1lc3NhZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGciLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJ0eHREZXNjcmlwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiZXNjcmV2ZSBhIHR1YSBtZW5zYWdlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM6ICIzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M6ICIxMCIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm1lc3NhZ2UgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubWVzc2FnZSA9ICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJiLWNvbCIsIHsgYXR0cnM6IHsgY29sczogIjIiIH0gfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItcm93IiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWNvbCIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIG1yLTIiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAic3VibWl0IiwgdmFyaWFudDogInN1Y2Nlc3MiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1lbnZlbG9wZS1zcXVhcmUgbXItMiIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRU5WSUFSICIpCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicC0yIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInJlc2V0IiwgdmFyaWFudDogImRhbmdlciIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWVyYXNlciBtci0yIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJMSU1QQVIgIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYi1jb2wiLCB7IGF0dHJzOiB7IGNvbHM6ICIyIiB9IH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZm9vdGVyIiwgeyBzdGF0aWNDbGFzczogImZvb3RlciB0ZXh0LWNlbnRlciIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy00IG1iLTUgbWItbGctMCIgfSwgWwogICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgbWItNCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQ3JpYWRvcmVzIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImxlYWQgbWItMCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJtYWlsdG86cmljYXJkby5xdWVpcm9zQGdtYWlsLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiUmljYXJkbyBRdWVpcsOzcyIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogIm1haWx0bzpmaWxpcGVwb3J0ZWxhQGlvdGVjaC5wdCIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiRmlsaXBlIFBvcnRlbGEiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgbWItNSBtYi1sZy0wIiB9LCBbCiAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXVwcGVyY2FzZSBtYi00IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJQUkVTRU7Dh0EgRElHSVRBTCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNvY2lhbCBteC0xIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWZ3IGZhLWZhY2Vib29rLWYiIH0pXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNvY2lhbCBteC0xIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWZ3IGZhLXR3aXR0ZXIiIH0pXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLW91dGxpbmUtbGlnaHQgYnRuLXNvY2lhbCBteC0xIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFiIGZhLWZ3IGZhLWxpbmtlZGluLWluIiB9KV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IGJ0bi1zb2NpYWwgbXgtMSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhYiBmYS1mdyBmYS1kcmliYmJsZSIgfSldCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctNCIgfSwgWwogICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC11cHBlcmNhc2UgbWItNCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiU29icmUgbyBBbmltYWxlYyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJsZWFkIG1iLTAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIEFuaW1hbGVjIHVzYSB0ZW1hIGRlIEJvb3RzdHJhcCBjb20gbGljZW7Dp2EgTUlULCBncmF0dWl0byBlIGNyaWFkbyBwb3IgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJodHRwOi8vc3RhcnRib290c3RyYXAuY29tIiwgdGFyZ2V0OiAiX2JsYW5rIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiU3RhcnRCb290c3RyYXAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiLiAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJjb3B5cmlnaHQgcHktNCB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgX2MoInNtYWxsIiwgW192bS5fdigiQ29weXJpZ2h0IMKpIEFOSU1BTEVDIDIwMjAiKV0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2Nyb2xsLXRvLXRvcCBkLWxnLW5vbmUgcG9zaXRpb24tZml4ZWQiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAianMtc2Nyb2xsLXRyaWdnZXIgZC1ibG9jayB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIHJvdW5kZWQiLAogICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwYWdlLXRvcCIgfQogICAgICAgIH0sCiAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhIGZhLWNoZXZyb24tdXAiIH0pXQogICAgICApCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}